//HintName: T.PacketParser.cs
// <auto-generated />

using System;
using System.Buffers.Binary;

namespace T
{
    readonly ref partial struct PacketParser
    {
        private readonly ReadOnlySpan<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(int) + T.HardwareAddress.Size + T.HardwareAddress.Size + sizeof(ushort);

        public PacketParser(ReadOnlySpan<byte> packetData)
        {
            _span = packetData;
        }

        public ReadOnlySpan<byte> GetRawData() => _span;

        
        
        /// <summary> This is value 1 </summary>
        /// <remarks>
        /// Some extra stuff
        /// </remarks>
        public int Value1
        {
           get => BinaryPrimitives.ReadInt32BigEndian(_span.Slice(0));
        }
        
        
        public T.HardwareAddress Source
        {
           get => new T.HardwareAddress(_span.Slice(0 + sizeof(int), T.HardwareAddress.Size));
        }
        
        
        public T.HardwareAddress Destination
        {
           get => new T.HardwareAddress(_span.Slice(0 + sizeof(int) + T.HardwareAddress.Size, T.HardwareAddress.Size));
        }
        
        
        public ushort Value2
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(int) + T.HardwareAddress.Size + T.HardwareAddress.Size));
        }
        
    }
}
