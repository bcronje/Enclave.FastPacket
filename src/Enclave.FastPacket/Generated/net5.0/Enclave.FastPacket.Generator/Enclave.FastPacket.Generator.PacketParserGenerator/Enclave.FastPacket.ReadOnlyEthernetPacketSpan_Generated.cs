// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct ReadOnlyEthernetPacketSpan
    {
        private readonly ReadOnlySpan<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = Enclave.FastPacket.HardwareAddress.Size + Enclave.FastPacket.HardwareAddress.Size + sizeof(ushort);

        /// <summary>
        /// Create a new instance of <see cref="ReadOnlyEthernetPacketSpan"/>.
        /// </summary>
        public ReadOnlyEthernetPacketSpan(ReadOnlySpan<byte> packetData)
        {
            _span = packetData;
        }

        /// <summary>
        /// Gets the raw underlying buffer for this packet.
        /// </summary>
        public ReadOnlySpan<byte> GetRawData() => _span;
        
        
        /// <summary>
        /// The destination hardware (MAC) address.
        /// </summary>
        public Enclave.FastPacket.HardwareAddress Destination
        {
           get => new Enclave.FastPacket.HardwareAddress(_span.Slice(0, Enclave.FastPacket.HardwareAddress.Size));
        }
        
        
        /// <summary>
        /// The source hardware (MAC) address.
        /// </summary>
        public Enclave.FastPacket.HardwareAddress Source
        {
           get => new Enclave.FastPacket.HardwareAddress(_span.Slice(0 + Enclave.FastPacket.HardwareAddress.Size, Enclave.FastPacket.HardwareAddress.Size));
        }
        
        
        /// <summary>
        /// The EtherType field.
        /// </summary>
        public Enclave.FastPacket.EthernetType Type
        {
           get => (Enclave.FastPacket.EthernetType)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + Enclave.FastPacket.HardwareAddress.Size + Enclave.FastPacket.HardwareAddress.Size)));
        }
        
        
        /// <summary>
        /// The Ethernet Payload.
        /// </summary>
        public System.ReadOnlySpan<byte> Payload
        {
           get => _span.Slice(0 + Enclave.FastPacket.HardwareAddress.Size + Enclave.FastPacket.HardwareAddress.Size + sizeof(ushort));
        }
        
        public override string ToString()
        {
            return $"Destination: {Destination}; Source: {Source}; Type: {Type}; Payload: {Payload.Length} bytes";
        }

        public int GetTotalSize()
        {
            return 0 + Enclave.FastPacket.HardwareAddress.Size + Enclave.FastPacket.HardwareAddress.Size + sizeof(ushort) + _span.Slice(0 + Enclave.FastPacket.HardwareAddress.Size + Enclave.FastPacket.HardwareAddress.Size + sizeof(ushort)).Length;
        }
    }
}
