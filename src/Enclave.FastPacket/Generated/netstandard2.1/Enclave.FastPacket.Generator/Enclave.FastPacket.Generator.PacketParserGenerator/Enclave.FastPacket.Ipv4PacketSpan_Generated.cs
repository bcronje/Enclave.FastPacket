// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct Ipv4PacketSpan
    {
        private readonly Span<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4 + 4;

        /// <summary>
        /// Create a new instance of <see cref="Ipv4PacketSpan"/>.
        /// </summary>
        public Ipv4PacketSpan(Span<byte> packetData)
        {
            _span = packetData;
        }

        /// <summary>
        /// Gets the raw underlying buffer for this packet.
        /// </summary>
        public Span<byte> GetRawData() => _span;

        
        
        /// <summary>
        /// The Version field indicates the format of the internet header.
        /// For IPv4 this will always have the value 4.
        /// </summary>
        public byte Version
        {
           get => (byte)((_span[0] & 0xF0u) >> 4);
           set => _span[0] = (byte)(((value << 4) & 0xF0u) | (byte)(_span[0] & ~0xF0u)); 
        }
        
        
        /// <summary>
        /// Internet Header Length is the length of the internet header in 32
        /// bit words, and thus points to the beginning of the data.Note that
        /// the minimum value for a correct header is 5.
        /// </summary>
        public byte IHL
        {
           get => (byte)(_span[0] & 0xFu);
           set => _span[0] = (byte)((value & 0xFu) | (byte)(_span[0] & ~0xFu)); 
        }
        
        
        /// <summary>
        /// Differentiated services field.
        /// </summary>
        /// <remarks>See https://en.wikipedia.org/wiki/Differentiated_services.</remarks>
        public byte Dscp
        {
           get => _span[0 + 1];
           set => _span[0 + 1] = value; 
        }
        
        
        /// <summary>
        /// Defines the entire packet size in bytes, including header and data.
        /// </summary>
        /// <remarks>
        /// This 16-bit field defines the entire packet size in bytes, including header and data.
        /// The minimum size is 20 bytes (header without data) and the maximum is 65,535 bytes.
        /// All hosts are required to be able to reassemble datagrams of size up to 576 bytes, but
        /// most modern hosts handle much larger packets. Links may impose further restrictions on the
        /// packet size, in which case datagrams must be fragmented. Fragmentation in IPv4 is performed in
        /// either the sending host or in routers. Reassembly is performed at the receiving host.
        /// </remarks>
        public ushort TotalLength
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte)), value); 
        }
        
        
        /// <summary>
        /// This field is an identification field and is primarily used for uniquely identifying the
        /// group of fragments of a single IP datagram.
        /// </summary>
        public ushort Identification
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort)), value); 
        }
        
        
        /// <summary>
        /// Fragmentation flags.
        /// </summary>
        public Enclave.FastPacket.FragmentFlags FragmentFlags
        {
           get => (Enclave.FastPacket.FragmentFlags)((byte)((_span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)] & 0xE0u) >> 5));
           set => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)] = (byte)((((byte)(value) << 5) & 0xE0u) | (byte)(_span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)] & ~0xE0u)); 
        }
        
        
        /// <summary>
        /// This field specifies the offset of a particular fragment relative to the beginning
        /// of the original unfragmented IP datagram in units of eight-byte blocks.
        /// </summary>
        public ushort FragmentOffset
        {
           get => (ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort))) & 0x1FFFu);
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)), (ushort)((value & 0x1FFFu) | (ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort))) & ~0x1FFFu))); 
        }
        
        
        /// <summary>
        /// An eight-bit time to live field limits a datagram's lifetime to prevent network failure in the event of a routing loop.
        /// The field is generally used a hop count, decremented by 1 each time a packet goes through a router.
        /// </summary>
        public byte Ttl
        {
           get => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2];
           set => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2] = value; 
        }
        
        
        /// <summary>
        /// The protocol code.
        /// </summary>
        public Enclave.FastPacket.IpProtocol Protocol
        {
           get => (Enclave.FastPacket.IpProtocol)(_span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte)]);
           set => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte)] = (byte)(value); 
        }
        
        
        /// <summary>
        /// Header checksum field used for error-checking of the header.
        /// </summary>
        public ushort HeaderChecksum
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte)), value); 
        }
        
        
        /// <summary>
        /// The source IPv4 address.
        /// </summary>
        public Enclave.FastPacket.ValueIpAddress Source
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort), 4));
           set => value.CopyTo(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort), 4)); 
        }
        
        
        /// <summary>
        /// The destination IPv4 address.
        /// </summary>
        public Enclave.FastPacket.ValueIpAddress Destination
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4, 4));
           set => value.CopyTo(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4, 4)); 
        }
        
        
        /// <summary>
        /// An options block (rarely used).
        /// </summary>
        public System.Span<byte> Options
        {
           get => _span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4 + 4, Enclave.FastPacket.Ipv4Definition.GetOptionsSize(_span));
        }
        
        
        /// <summary>
        /// The IP payload.
        /// </summary>
        public System.Span<byte> Payload
        {
           get => _span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4 + 4 + Enclave.FastPacket.Ipv4Definition.GetOptionsSize(_span));
        }
        
    }
}
