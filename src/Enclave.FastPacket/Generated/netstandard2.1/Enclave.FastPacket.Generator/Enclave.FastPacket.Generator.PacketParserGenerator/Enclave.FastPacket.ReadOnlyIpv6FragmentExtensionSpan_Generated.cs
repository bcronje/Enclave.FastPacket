// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct ReadOnlyIpv6FragmentExtensionSpan
    {
        private readonly ReadOnlySpan<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(byte) + sizeof(byte) + 2 + sizeof(uint);

        /// <summary>
        /// Create a new instance of <see cref="ReadOnlyIpv6FragmentExtensionSpan"/>.
        /// </summary>
        public ReadOnlyIpv6FragmentExtensionSpan(ReadOnlySpan<byte> packetData)
        {
            _span = packetData;
        }

        /// <summary>
        /// Gets the raw underlying buffer for this packet.
        /// </summary>
        public ReadOnlySpan<byte> GetRawData() => _span;
        
        
        public Enclave.FastPacket.IpProtocol NextHeader
        {
           get => (Enclave.FastPacket.IpProtocol)(_span[0]);
        }
        
        
        private byte Reserved
        {
           get => _span[0 + sizeof(byte)];
        }
        
        
        public ushort FragmentOffset
        {
           get => (ushort)((BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(byte) + sizeof(byte))) & 0xFFF8u) >> 3);
        }
        
        
        public bool MoreFragments
        {
           get => ((byte)(_span[0 + sizeof(byte) + sizeof(byte)] & 0x1u)) > 0;
        }
        
        
        public uint Identification
        {
           get => BinaryPrimitives.ReadUInt32BigEndian(_span.Slice(0 + sizeof(byte) + sizeof(byte) + 2));
        }
        
        /// <summary>
        /// Get a string representation of this packet.
        /// </summary>
        public override string ToString()
        {
            return $"NextHeader: {NextHeader}; ; FragmentOffset: {FragmentOffset}; MoreFragments: {MoreFragments}; Identification: {Identification}";
        }

        /// <summary>
        /// Get the computed total size of this packet, including any dynamically-sized fields and trailing payloads.
        /// </summary>
        public int GetTotalSize()
        {
            return 0 + sizeof(byte) + sizeof(byte) + 2 + sizeof(uint);
        }
    }
}
