// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct MyPacketImplementation
    {
        private readonly Span<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(byte) + sizeof(byte) + sizeof(ushort);

        public MyPacketImplementation(Span<byte> packetData)
        {
            _span = packetData;
        }

        public Span<byte> GetRawData() => _span;

        
        
        public byte Field1
        {
           get => _span[0];
           set => _span[0] = value; 
        }
        
        
        public byte Field2
        {
           get => _span[0 + sizeof(byte)];
           set => _span[0 + sizeof(byte)] = value; 
        }
        
        
        public ushort Field3
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(byte) + sizeof(byte)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(byte) + sizeof(byte)), value); 
        }
        
        
        public System.Span<byte> RestOfData
        {
           get => _span.Slice(0 + sizeof(byte) + sizeof(byte) + sizeof(ushort));
        }
        
    }
}
