// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket.Icmp
{
    readonly ref partial struct Icmpv4RedirectSpan
    {
        private readonly Span<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4;

        /// <summary>
        /// Create a new instance of <see cref="Icmpv4RedirectSpan"/>.
        /// </summary>
        public Icmpv4RedirectSpan(Span<byte> packetData)
        {
            _span = packetData;
        }

        /// <summary>
        /// Gets the raw underlying buffer for this packet.
        /// </summary>
        public Span<byte> GetRawData() => _span;

        
        
        public Enclave.FastPacket.Icmpv4Types Type
        {
           get => (Enclave.FastPacket.Icmpv4Types)(_span[0]);
           set => _span[0] = (byte)(value); 
        }
        
        
        public Enclave.FastPacket.Icmp.Icmpv4RedirectCodes Code
        {
           get => (Enclave.FastPacket.Icmp.Icmpv4RedirectCodes)(_span[0 + sizeof(byte)]);
           set => _span[0 + sizeof(byte)] = (byte)(value); 
        }
        
        
        public ushort Checksum
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(byte) + sizeof(byte)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(byte) + sizeof(byte)), value); 
        }
        
        
        public Enclave.FastPacket.ValueIpAddress IpAddress
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + sizeof(byte) + sizeof(byte) + sizeof(ushort), 4));
           set => value.CopyTo(_span.Slice(0 + sizeof(byte) + sizeof(byte) + sizeof(ushort), 4)); 
        }
        
        
        public System.Span<byte> IpHeaderAndDatagram
        {
           get => _span.Slice(0 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4);
        }
        
    }
}
