// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct TcpPacketSpan
    {
        private readonly Span<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort) + sizeof(ushort);

        public TcpPacketSpan(Span<byte> packetData)
        {
            _span = packetData;
        }

        public Span<byte> GetRawData() => _span;

        
        
        public ushort SourcePort
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0), value); 
        }
        
        
        public ushort DestinationPort
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(ushort)), value); 
        }
        
        
        public uint SequenceNumber
        {
           get => BinaryPrimitives.ReadUInt32BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort)));
           set => BinaryPrimitives.WriteUInt32BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort)), value); 
        }
        
        
        public uint AckNumber
        {
           get => BinaryPrimitives.ReadUInt32BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint)));
           set => BinaryPrimitives.WriteUInt32BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint)), value); 
        }
        
        
        public byte DataOffset
        {
           get => (byte)((_span[0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint)] & 0xF0u) >> 4);
           set => _span[0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint)] = (byte)(((value << 4) & 0xF0u) | (byte)(_span[0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint)] & ~0xF0u)); 
        }
        
        
        public Enclave.FastPacket.TcpFlags Flags
        {
           get => (Enclave.FastPacket.TcpFlags)((ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint))) & 0xFFFu));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint)), (ushort)(((ushort)(value) & 0xFFFu) | (ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint))) & ~0xFFFu))); 
        }
        
        
        public ushort WindowSize
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2), value); 
        }
        
        
        public ushort Checksum
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort)), value); 
        }
        
        
        public ushort UrgentPointer
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort)), value); 
        }
        
        
        public System.Span<byte> Options
        {
           get => _span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort) + sizeof(ushort), Enclave.FastPacket.TcpPacketDefinition.GetOptionSize(_span));
        }
        
        
        public System.Span<byte> Payload
        {
           get => _span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort) + sizeof(ushort) + Enclave.FastPacket.TcpPacketDefinition.GetOptionSize(_span));
        }
        
    }
}
