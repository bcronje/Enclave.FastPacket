// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct TcpPacketReadOnlySpan
    {
        private readonly ReadOnlySpan<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort) + sizeof(ushort);

        public TcpPacketReadOnlySpan(ReadOnlySpan<byte> packetData)
        {
            _span = packetData;
        }

        public ReadOnlySpan<byte> GetRawData() => _span;

        
        
        public ushort SourcePort
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0));
        }
        
        
        public ushort DestinationPort
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort)));
        }
        
        
        public uint SequenceNumber
        {
           get => BinaryPrimitives.ReadUInt32BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort)));
        }
        
        
        public uint AckNumber
        {
           get => BinaryPrimitives.ReadUInt32BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint)));
        }
        
        
        public byte DataOffset
        {
           get => (byte)((_span[0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint)] & 0xF0u) >> 4);
        }
        
        
        public Enclave.FastPacket.TcpFlags Flags
        {
           get => (Enclave.FastPacket.TcpFlags)((ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint))) & 0xFFFu));
        }
        
        
        public ushort WindowSize
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2));
        }
        
        
        public ushort Checksum
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort)));
        }
        
        
        public ushort UrgentPointer
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort)));
        }
        
        
        public System.ReadOnlySpan<byte> Options
        {
           get => _span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort) + sizeof(ushort), Enclave.FastPacket.TcpPacketDefinition.GetOptionSize(_span));
        }
        
        
        public System.ReadOnlySpan<byte> Payload
        {
           get => _span.Slice(0 + sizeof(ushort) + sizeof(ushort) + sizeof(uint) + sizeof(uint) + 2 + sizeof(ushort) + sizeof(ushort) + sizeof(ushort) + Enclave.FastPacket.TcpPacketDefinition.GetOptionSize(_span));
        }
        
    }
}
