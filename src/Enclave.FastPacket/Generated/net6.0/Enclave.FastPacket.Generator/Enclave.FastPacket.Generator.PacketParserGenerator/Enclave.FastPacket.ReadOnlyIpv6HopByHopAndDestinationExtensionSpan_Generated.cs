// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct ReadOnlyIpv6HopByHopAndDestinationExtensionSpan
    {
        private readonly ReadOnlySpan<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = sizeof(byte) + sizeof(byte);

        /// <summary>
        /// Create a new instance of <see cref="ReadOnlyIpv6HopByHopAndDestinationExtensionSpan"/>.
        /// </summary>
        public ReadOnlyIpv6HopByHopAndDestinationExtensionSpan(ReadOnlySpan<byte> packetData)
        {
            _span = packetData;
        }

        /// <summary>
        /// Gets the raw underlying buffer for this packet.
        /// </summary>
        public ReadOnlySpan<byte> GetRawData() => _span;
        
        
        /// <summary>
        /// The next header after this extension.
        /// </summary>
        public Enclave.FastPacket.IpProtocol NextHeader
        {
           get => (Enclave.FastPacket.IpProtocol)(_span[0]);
        }
        
        
        /// <summary>
        /// The length of this extension header, excluding the first 8 bytes.
        /// </summary>
        public byte HeaderExtensionLength
        {
           get => _span[0 + sizeof(byte)];
        }
        
        
        /// <summary>
        /// The options and padding included in this header.
        /// </summary>
        public System.ReadOnlySpan<byte> OptionsAndPadding
        {
           get => _span.Slice(0 + sizeof(byte) + sizeof(byte), Enclave.FastPacket.Ipv6HopByHopAndDestinationExtension.GetOptionsSize(_span));
        }
        
        /// <summary>
        /// Get a string representation of this packet.
        /// </summary>
        public override string ToString()
        {
            return $"NextHeader: {NextHeader}; HeaderExtensionLength: {HeaderExtensionLength}; OptionsAndPadding: {OptionsAndPadding.Length} bytes";
        }

        /// <summary>
        /// Get the computed total size of this packet, including any dynamically-sized fields and trailing payloads.
        /// </summary>
        public int GetTotalSize()
        {
            return 0 + sizeof(byte) + sizeof(byte) + Enclave.FastPacket.Ipv6HopByHopAndDestinationExtension.GetOptionsSize(_span);
        }
    }
}
