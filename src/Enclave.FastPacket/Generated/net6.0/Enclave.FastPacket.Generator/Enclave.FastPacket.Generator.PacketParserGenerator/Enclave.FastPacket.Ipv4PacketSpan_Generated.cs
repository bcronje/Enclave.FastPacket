// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct Ipv4PacketSpan
    {
        private readonly Span<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4 + 4;

        public Ipv4PacketSpan(Span<byte> packetData)
        {
            _span = packetData;
        }

        public Span<byte> GetRawData() => _span;

        
        
        public byte Version
        {
           get => (byte)((_span[0] & 0xF0u) >> 4);
           set => _span[0] = (byte)(((value << 4) & 0xF0u) | (byte)(_span[0] & ~0xF0u)); 
        }
        
        
        public byte IHL
        {
           get => (byte)(_span[0] & 0xFu);
           set => _span[0] = (byte)((value & 0xFu) | (byte)(_span[0] & ~0xFu)); 
        }
        
        
        public byte Dscp
        {
           get => _span[0 + 1];
           set => _span[0 + 1] = value; 
        }
        
        
        public ushort TotalLength
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte)), value); 
        }
        
        
        public ushort Identification
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort)), value); 
        }
        
        
        public Enclave.FastPacket.FragmentFlags FragmentFlags
        {
           get => (Enclave.FastPacket.FragmentFlags)((byte)((_span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)] & 0xE0u) >> 5));
           set => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)] = (byte)((((byte)(value) << 5) & 0xE0u) | (byte)(_span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)] & ~0xE0u)); 
        }
        
        
        public ushort FragmentValue
        {
           get => (ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort))) & 0x1FFFu);
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort)), (ushort)((value & 0x1FFFu) | (ushort)(BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort))) & ~0x1FFFu))); 
        }
        
        
        public byte Ttl
        {
           get => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2];
           set => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2] = value; 
        }
        
        
        public System.Net.Sockets.ProtocolType Protocol
        {
           get => (System.Net.Sockets.ProtocolType)(_span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte)]);
           set => _span[0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte)] = (byte)(value); 
        }
        
        
        public ushort HeaderChecksum
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte)));
           set => BinaryPrimitives.WriteUInt16BigEndian(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte)), value); 
        }
        
        
        public Enclave.FastPacket.ValueIpAddress Source
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort), 4));
           set => value.CopyTo(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort), 4)); 
        }
        
        
        public Enclave.FastPacket.ValueIpAddress Destination
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4, 4));
           set => value.CopyTo(_span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4, 4)); 
        }
        
        
        public System.Span<byte> Options
        {
           get => _span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4 + 4, Enclave.FastPacket.Ipv4Definition.GetOptionsSize(_span));
        }
        
        
        public System.Span<byte> Payload
        {
           get => _span.Slice(0 + 1 + sizeof(byte) + sizeof(ushort) + sizeof(ushort) + 2 + sizeof(byte) + sizeof(byte) + sizeof(ushort) + 4 + 4 + Enclave.FastPacket.Ipv4Definition.GetOptionsSize(_span));
        }
        
    }
}
