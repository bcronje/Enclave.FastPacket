// <auto-generated />

using System;
using System.Buffers.Binary;

namespace Enclave.FastPacket
{
    readonly ref partial struct Ipv6PacketReadOnlySpan
    {
        private readonly ReadOnlySpan<byte> _span;

        /// <summary>
        /// Defines the minimum possible size of this packet, given all
        /// known fixed sizes.
        /// </summary>
        public const int MinimumSize = 4 + sizeof(ushort) + sizeof(byte) + sizeof(byte) + 16 + 16;

        public Ipv6PacketReadOnlySpan(ReadOnlySpan<byte> packetData)
        {
            _span = packetData;
        }

        public ReadOnlySpan<byte> GetRawData() => _span;

        
        
        public byte Version
        {
           get => (byte)((_span[0] & 0xF0u) >> 4);
        }
        
        
        public byte TrafficClass
        {
           get => (byte)((ushort)((BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0)) & 0xFF0u) >> 4));
        }
        
        
        public uint FlowLabel
        {
           get => (uint)(BinaryPrimitives.ReadUInt32BigEndian(_span.Slice(0)) & 0xFFFFFu);
        }
        
        
        public ushort PayloadLength
        {
           get => BinaryPrimitives.ReadUInt16BigEndian(_span.Slice(0 + 4));
        }
        
        
        public System.Net.Sockets.ProtocolType NextHeader
        {
           get => (System.Net.Sockets.ProtocolType)(_span[0 + 4 + sizeof(ushort)]);
        }
        
        
        public byte HopLimit
        {
           get => _span[0 + 4 + sizeof(ushort) + sizeof(byte)];
        }
        
        
        public Enclave.FastPacket.ValueIpAddress SourceAddress
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + 4 + sizeof(ushort) + sizeof(byte) + sizeof(byte), 16));
        }
        
        
        public Enclave.FastPacket.ValueIpAddress DestinationAddress
        {
           get => new Enclave.FastPacket.ValueIpAddress(_span.Slice(0 + 4 + sizeof(ushort) + sizeof(byte) + sizeof(byte) + 16, 16));
        }
        
        
        public System.ReadOnlySpan<byte> Payload
        {
           get => _span.Slice(0 + 4 + sizeof(ushort) + sizeof(byte) + sizeof(byte) + 16 + 16);
        }
        
    }
}
